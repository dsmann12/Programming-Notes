Dict - hash table

Efficient key/value hash table structure called "dict". 

Contents of dict can be written as series of key, value pairs within braces {}/

dict = {key1:value1, key2:value2, ...}

Looking up or setting value in a dict uses square brackets, e.g. dict['foo'] looks up value under key 'foo'. 

Strings, numbers, nad typles work as keys and any type can be a value. 

Other types may or may not work correctly as keys (string and typles work since they are immutable.)

Looking up value that is not in dict throws a KeyError -- use "in" to check if the key is in the dict, or use dict.get(key) which returns the value or None if the key is not present (or get(key, not-found) allows you to specify what value to return in not-found case. 

  ## Can build up a dict by starting with the the empty dict {}
  ## and storing key/value pairs into the dict like this:
  ## dict[key] = value-for-that-key
  dict = {}
  dict['a'] = 'alpha'
  dict['g'] = 'gamma'
  dict['o'] = 'omega'

  print dict  ## {'a': 'alpha', 'o': 'omega', 'g': 'gamma'}

  print dict['a']     ## Simple lookup, returns 'alpha'
  dict['a'] = 6       ## Put new key/value into dict
  'a' in dict         ## True
  ## print dict['z']                  ## Throws KeyError
  if 'z' in dict: print dict['z']     ## Avoid KeyError
  print dict.get('z')  ## None (instead of KeyError)

'a' in dict - check if key is in dict

dict.get('o') #gets values through keys in constant time #avoid keyerror

loop on dictionary iterates over keys by default. Keys will appear in arbitrary order.

dict.keys() - returns lists of keys
dict.values() - return list of values

dict.itesm() - returns a list of key,value tuples, which is most efficient way to examine all key value data in dictionary. 

All these lists can be passed to sorted() function.

  ## By default, iterating over a dict iterates over its keys.
  ## Note that the keys are in a random order.
  for key in dict: print key
  ## prints a g o
  
  ## Exactly the same as above
  for key in dict.keys(): print key

  ## Get the .keys() list:
  print dict.keys()  ## ['a', 'o', 'g']

  ## Likewise, there's a .values() list of values
  print dict.values()  ## ['alpha', 'omega', 'gamma']

  ## Common case -- loop over the keys in sorted order,
  ## accessing each key/value
  for key in sorted(dict.keys()):
    print key, dict[key]
  
  ## .items() is the dict expressed as (key, value) tuples
  print dict.items()  ##  [('a', 'alpha'), ('o', 'omega'), ('g', 'gamma')]

  ## This loop syntax accesses the whole dict by looping
  ## over the .items() tuple list, accessing one (key, value)
  ## pair on each iteration.
  for k, v in dict.items(): print k, '>', v
  ## a > alpha    o > omega     g > gamma

iter variants of these methods called iterkeys(), itervalues(), and iteritems() which avoid cost of constructing the whole list -- a performance win if data is huge. In Python 3000, need for iterkeys() variants going away. 

From performance POV, dictoinary is one of your greatest tools, and you should use it where you can as an easy way to organize data. 

Example: read log file where each line begins with an IP address, and store data into a dict using IP address as key, and list of line where it appears as value. Once read whole file, can look up any IP address and instantly see its list of lines. 

Dictionary takes scattered data and makes it into something coherent. 

DICT FORMATTING

% operator works to substitute values from dict into a string by name
  hash = {}
  hash['word'] = 'garfield'
  hash['count'] = 42
  s = 'I want %(count)d copies of %(word)s' % hash  # %d for int, %s for string
  # 'I want 42 copies of garfield'

DEL

del operator does deletions. 

Can remove definition of a variable in simplest case. As if variable had not been defined. 

Can also be used on list elements or slices to delete that part of list and to delete entries from a dictionary

  var = 6
  del var  # var no more!
  
  list = ['a', 'b', 'c', 'd']
  del list[0]     ## Delete first element
  del list[-2:]   ## Delete last two elements
  print list      ## ['b']

  dict = {'a':1, 'b':2, 'c':3}
  del dict['b']   ## Delete 'b' entry
  print dict      ## {'a':1, 'c':3}

FILES

open() - opens and returns a file handle that can be used to read or write a file in the usual way. Code:

f = open('name', 'r') - opens file into variable f, ready for reading operations,

use f.close() - when finished

Use 'w' for writing, 'a' for appending

Special mode:
'rU' - "Universal" option for text files where it's smart about converting different line-endings so they always come through as a simple '\n'. 

Standard for loop works for text files, iterating through the lines of the file (only works for text files, not binary files). 

for loop is simple and efficient way to look at all lines in text file

  # Echo the contents of a file
  f = open('foo.txt', 'rU')
  for line in f:   ## iterates over the lines of the file
    print line,    ## trailing , so print does not add an end-of-line char
                   ## since 'line' already includes the end-of line.
  f.close()

Reading one line at a time so whole file does not need to be in memory at one time -- handy if you want to look at every line in a 10 gigabyte file without using 10 gigs of memory. 

The f.readlines() method reads whole file into memory and returns its contents as a lis of its lines. 

readlines() can cause issues if reading a large file. Storing all of file into memory. 

f.read() method reads whole file into a single string, which can be a handy way to deal with text all at once, such as with regular expressions. 

Is like a cursor. To go back to beginning, must call seek(0). 

For writing, f.write(string) method is easiest way to write data to an open output file. Or you can use "print" with open file, but syntax is nasy: 

"print >> f, string". 

In python 3000, the print syntax will be fixed to be a regular functoin call with a a file= optional argument:

print(string, file=f)

FILE UNICODE

codecs module provides support for reading a unicode file

import codecs

f = codecs.open('foo.txt', 'rU', 'utf-8')
for line in f:
  # here line is a *unicode* string

For writing, use f.write() since print does not fully support unicode. 

EXERCISE INCREMENTAL DEVELOPMENT

Do not write whole in program in one step. Instead identify just a first milestone. Then move to next milestone. 
