Sorting

Easiest way to sort is with sorted() function.

sorted(list) - takes list and returns a new list with elements in sorted order. Original list is not changed.

Can take input from an iterable collection. 

  a = [5, 1, 4, 3]
  print sorted(a)  ## [1, 3, 4, 5]
  print a  ## [5, 1, 4, 3]

sorted() can be customized through optional arguments. The optional argument reverse=True makes it sort backwards

Custom Sorting With Key=

sorted() can take optional key= specifying a "key" function that transforms eac element before comparison. Key function takes in 1 value and returns 1 value, and returned proxy value is used for compairons within the sort. 

Specifying key=len for strings sorts strings by length, from shortest to longest. Sort calls len() for each string to get list of proxy length values and then sorts with those proxy values

  strs = ['ccc', 'aaaa', 'd', 'bb']
  print sorted(strs, key=len)  ## ['d', 'bb', 'ccc', 'aaaa']

key=str.lower - force sorted to treat uppercase and lowercase the same.

Can also pass custom user function:

  ## Say we have a list of strings we want to sort by the last letter of the string.
  strs = ['xc', 'zb', 'yd' ,'wa']

  ## Write a little function that takes a string, and returns its last letter.
  ## This will be the key function (takes in 1 value, returns 1 value).
  def MyFn(s):
    return s[-1]

  ## Now pass key=MyFn to sorted() to sort by the last letter:
  print sorted(strs, key=MyFn)  ## ['wa', 'zb', 'xc', 'yd']

Also optional argument "cmp=cmpFn" to sorted() that specifies a traditional two argument comparison function that takes two values from list an returns negative/0/positive to indicate their ordering. 

cmp(a,b) is built in comparison function for strings, ints, ...

sort() Method

sort() - sorts list into ascending order, changing underlying list and returning nothing

list.sort()
alist = blist.sort() ##NO incorrect

sort() must be called on a list. Does not work on any enumerable collection. 

Can be a little faster since elements sorted inplace. 

Tuples

A tuple is a fixed size grouping of elements, such as (x, y) coordinate. Tuples are like lists, except they are immutable and do not change size (no strictly immutable since one of contained elements could be mutable.

Play a sort of struct role in Python -- convenient way to pass around a little logicalm fixed size bundle of values. Function that needs to return multiple values can just return a typle of values. 

To create tuple, list values within parenthesis separated by commas. Empty tuple is just an empty pair of parentheseis. Accessing element in tuple is just like a list

  tuple = (1, 2, 'hi')
  print len(tuple)  ## 3
  print tuple[2]    ## hi
  tuple[2] = 'bye'  ## NO, tuples cannot be changed
  tuple = (1, 2, 'bye')  ## this works

To create a size-1 tuple, long element must be followed by a comma. 

tuple = ('hi',) ##size-1 tuple

Assigning a typle to an identically sized type of variable names assigns all corresponding values. If types are not same size, throws an error. Also works for lists:

  (x, y, z) = (42, 13, "hike")
  print z  ## hike
  (err_string, err_code) = Foo()  ## Foo() returns a length-2 tuple

List Comprehensions 

More advanced feature which is nice for some cases. Compact way to write an expression that expands to a whole list. 

Suppose have whole list [1. 2 3]. Can use list comprehension to compute a list of their squares

  nums = [1, 2, 3, 4]

  squares = [ n * n for n in nums ]   ## [1, 4, 9, 16]

[ expr for var in list] - expr is evaluated once for each element to gives values for new list

Example: return list of strings chaning string from other list to uppercase and appending '!!!'
  strs = ['hello', 'and', 'goodbye']

  shouting = [ s.upper() + '!!!' for s in strs ]
  ## ['HELLO!!!', 'AND!!!', 'GOODBYE!!!']

Can add an if test to right of for loop to narrow result. If test is evaluated for each element, including only elements where tets is true

  ## Select values <= 2
  nums = [2, 8, 1, 6]
  small = [ n for n in nums if n <= 2 ]  ## [2, 1]

  ## Select fruits containing 'a', change to upper case
  fruits = ['apple', 'cherry', 'bannana', 'lemon']
  afruits = [ s.upper() for s in fruits if 'a' in s ]
  ## ['APPLE', 'BANNANA']
