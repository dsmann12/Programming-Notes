UNITY

Download from website

Also Blender for assets
Audacity for audio

THE EDITOR

PlayMode tip. So that chanages do not persist when mess with them inside a running game.

Right click assets to add code. 

Different layouts. 

Different modes for doing different interactions in the scene. 

QWERT -> to switch between modesa

CREATE GAME

GameObject -> Create Empty

Rename appropriately. 

Then Go to inspector. 

Click on object, Select Add Component in inspector. 

Choose NewScript

Choose C# as languae

Can organize folders in Assets

Create a Script folder.

In script,

has Start() and Update() methods. 

Update called once per frame. Start called at init. 

print(string) -> print to console

Input() -> get characters from input 

Input.GetKeyDown() -> Get key down entered. 

if (Input.GetKeyDown("space")) {
	print("Space pressed");
}

KeyCode.UpArrow -> Gives you keycode for up arrow for use in Input functions

CREATING PROJECTS

File->New Project

To import assets, can drag a file (.png file, etc) to the Assets plane in Unity.

Can then click on it to see settings

In Inspector, should see Texture Type (Sprite (2D and UI)), and other settings. 

Must save a scene and give it a name for it to persist. 

SCRIPTS

Update() - called before rendering a frame. Where most game update code will go

FixedUpdate() - called before performing any physics calculation. Where physics code will go

float moveHorizontal = Input.GetAxis("Horizontal");
float moveVertical = Input.GetAxis("Vertical");

MOVEMENT WITH RIGIDBODY

Can use RigidBody.AddForce(Vector3) to add movement to an object. 

First need to get Rigidbody component on object.

public Rigidbody rb;

Then in Start()

rb = getComponent<RigidBody>();

Then in FixedUpdate

Vector3 movement = new Vector3(moveHorizontal, 0, moveVertical);
rb.AddForce(movement * 10);

MOVING THE CAMERA

Can transform camera. 

Can also make camera a child of player game object so that it moves with object. Will rotate and move with object

In this case, camera will rotate with player though. 

So must give it its own offset value that is always relative to player. So relative to player's transform.

Offset value will be difference between player game object and camera.

use a script. Add to camera. CameraController.cs

Give it fields

public GameObject player;
private Vector3 offset;

In Start
offset = transform.position - player.transform.position;

In LateUpdate

transform.position = player.transform.position + offset

LateUpdate is best. For follow cameras, procedural animation, and gathering last known states. Runs every frame but is guaranteed to run after all items have been processed in update. 

SETTING UP PLAYE AREA

Place walls around edges to keep player from falling off. And create and place collectibles. 

Create new game object and name it walls. 

Can organize hierarchies by using game objects. Game objects can hold other game objects. Can be used for hierarchy. 

Want transform of all container game objects at origin before using them.

Can use CTRL-D to duplicate objects

In local mode can see transform rotate

Use global mode so can move object relative to global axese instead of object local axes

ADDING 2D INTERFACE TEXT

GamObject -> UI -> Text

In Hierarchy, a Canvas will be added, with a Text object. An EventSystem will be added too. 

Setting camera background color

Click camera element in hierarchy, and in inspector change the color

Can do similar to change color and font size of text ui object 

ADDING SCRIPT TO TEXT

Click Text element and add a component

Choose NewScript, call it TextController

Add a field to TextController:

public Text text;

Must import UnityEngine.UI to use Text class

this.text.text = "Hello World" in Start()

When game runs, it will not show dynamically create text.

Drag Text element from hierarchy and place it in Text area of TextController script in the Text inspector. 

ADDING AN IMAGE

GameObject -> UI -> Image

Drag image from assets to the source image field in Inspector

WORD WRAPPING AND JOINING STRINGS

Setting long strings in code may change some things

Text Option -> Horizontal Overflow

Wrap -> wraps text to next line
Overflow -> overflows past the canvas widrh

CREATING A GAME ENGINE

One state method per state is often useful.
Update() keeps game in right state. 

Can use enum for states. 

Use enum to check state at each Update(). Run method for each state. 

SHARE ON WEB

Make default screen width 800x600, black background, 

File -> Build Settings 

Put scene in Scenes in building by dragging.

Check Web Player, check streamed, and change height and width in settings. 

Inlcude which type of build in name. 

Can share it on gamebucket.io

Then can play it online.

Can use WebGL to make it so it can run without plugins. 

CREATING AND SAVING LEVELS

scenes = levels

PIVOT AND ANCHOR

HOW TO ADD A BUTTON

Can rename text elements in Unity

Can use textbox as a button. Start button, quit button

To turn text to a button.

Add Component -> UI -> Button

Highlighted Color, Pressed Color, allow you to change color based on events. Highlighted and pressed, etc.

CALLING SCRIPTS FROM BUTTONS

Click + in On Click() in button inspector

Add a GameObject in (0, 0) position. E.g. LevelManager
Then Add a component -> new script

Then after you create this object, can drag it into the button's On Click input

Must make method public to use it in On Click.

HOW TO LOAD SCENES AND QUIT

Use Application.LoadLevel() -> loads a new level

Application.Quit() -> quits game. Has limitations and may noy work as expected sometimes. 

Application.LoadLevel(str);

Must add level to build settings. 

Scenes in Build -> Add. 

Can drag them in from folder too. 

Application.Quit is limited on web or debug build. Won't have any effect. And will not work on mobile as it doesn't follow guidelines

CREATING IMAGES

Can use GIMP or PHOTOSHOP to create images to bring into Unity. 

PLAYING MUSIC

Persistent music improves quality

Music Player Game Object
Add a music track of your choice

Use GameObject.DontDestroyOnLoad()

Test that music plays consistently. 

Drag song into Unity. 

Have Scripts, _Scenes, Sounds, Sprites, and Fonts folders. 

Drag song onto an added object. Component is an AudioSource. Add song as audio clicp. 

gameObject -> instance of the music player. The GameObject created. 

GameObject.DontDestroyOnLoad(gameObject);

STATICS AND SINGLETONS

Can use static variables to create a singleton for the music player so it persists and doesn't accumulate. 

SCRIPT EXECUTION ORDER

Reset
|
v
Awake
|
v
OnEnable
|
v
Start


Can effects how things happen. Some functoins are called before others. 

Like lifecycle in Angular 

Especially problematic with persistent music

Z-DEPTH

Unity is always 3D even in "2D"

The Z position of sprites matters for rendering

Like HTML

Sprites further from the camera get rendered first. 

World Units -> position in unity's game space.

Need 50 Pixels per World Unity to have 16 of an asset in an 800 width canvas

Drag image onto scene to have a background. 

Make sure Main Camera is orthographic. Means it does not take account of how far away an object is from it at all. 

Can move the camera to figure out size of baackground (playspace)?

Can reduce alpha to make it more subtle

Transform is anchor point. Could put pivot in bottom left to transform it from bottom left. 

Click on picture and go into sprite editor mode. 

Camera size is determined by game window. If you make toolbars bigger, game window will shrink.

In Game, set Aspect Ratio to specific ratio

Must set camera aspect ratio

Camera

Size -> number of world units from center to top of camera



Background picture: 800x600
Aspect Ratio: 4:3
Screen Width: 16WU
800/16 = 50 PPU for bg image. Pixers Per Unit
Width in WU: 16
Height in WU: (16/4)*3 = 12
Camera Size: 12/2

GRAVITY AND COLLISIONS

Can put a ball.png in the scene. 

Give it a correct PPU size. Higher makes image smaller. 

40 PPU

Need a component to give the ball physics.

Add Component -> Physics 2D -> Rigid Body 2D

Messes with mass, linear drag, etc. 

Need ball to tell game when it has falled on the canvas

Need a component called a Collider

Collider 

Add Component -> Physics 2D -> Circle collider 2D

Work by hitting other colliders

IsTrigger means it doesn't collide with other objects. If not, it does collide

Collider components define the shape of an object for the purposes of physical collisions. A collider, which is invisible, need not be the exact same shape as the object's..."

Add second collider for game canvas

GameObject -> AddEmpty

Colliders allow us to trigger events or handle collisions. How object interact with each other phyusically.

Message Passing

When two game objects with collisions meet. Engine sends a message to the objects. We "intercept" this message in a script. Script decides what to do next. 

Will either pass a message for a collision or for a trigger. Collisions happen when non-trigger colliders meet. 

Collisions are calculated with physics 

Types of colliders explained

Static -> if it has a collider but no rigidbody

Rigidbody => if it's got a rigidbody component

Kinematic -> if kinematic ticked on rigidbody

If it's going to move during the game, slap a rigidbody on it. Avoid moving static colliders 

Signatues of messages passed:

Collision detected
void OnCollisoinEnter2D(Collision2D collision)

Triggers
void OnTriggerEnter2D(Collider2D collider)

Collisions are for physics. Triggers are for events

TIDYING UP

Can set specific resolution

CTRL-1 and CTRL-2 switch between game and level

In component that catches trigger event, can add an instance of LevelManager object. 

when trigger event function is called (caught), run the LoadLevel() method of LevelManager (custom object) to load the lose screen. 

Make LevelManager field public and drag the object to it in Unity

CHOOSING COLLIDERS

Static -> should be for objects that won't move

RigitBody 2D -> Rigidbodies enable your GameObjects to act under the control of physics. The Rigidbody can receive forces and torque to make objects move in a realistic way. 

Kinematic Collider makes an object float. Will not have physics acted on it when collided. So will not be moved by an object when hit. Object will not be driven by the physics engine, and can only be manipulated by its Transform. Useful for moving platforms or if you want to animate a Rigidbody that has a Hingejoint attached

PHYSICS MATERIALS

Physics Material is used to adjust frictoin and bouncing effects of colliding objects

Make folder for Physics Materials (there are other types of materials)

Right click in assets -> create -> Physics Material 2D

Give it a name (lowercase?).

Can change its friction coefficient and its bounciness. 

Then must add this to the object

Bounciness -> between 0 and 1. 0 means no bounce. 1 means bounce with no loss of energy (travels back same amount it traveled to hit the object). 100% energy conserved in colliiosion.

Use square root to convert to COR -> how much you want it to bounce

So if you want it to bounce to half the height of its fall (or movement), then you do sqroot(0.5). If 1/3 of height, then sqroot(0.33). Etc

MOVEMEBT BY MOUSE

Using Input.MousePosition.x
Screen.width -> get screen width
Move paddle using this.transform.position
Use Mathf.Clamp to constrain paddle

Fix paddle's PPU to 128

Can reset a collider to make it precisely the size of an object like a box. 

Input.MousePosition -> gives (x, y, z) coordinates of mouse

Input.MousePosition.x -> gives just the x position

Input.MousePosition.x / Screen.Width -> mouse position relative to screen width (So between say 0 and 16

If multiplu by World Units can tell how many game units

Input.MousePosition.x / (Screen.Width * 16) -> number of units

float mousePosInBlocks = Input.mousePosition.x / Screen.width * 16

Cannot change transform.position by coordinate (x, y, z). Must set transform.position to a Vector3 structure

Vector3 -> structure used throughout Unity to pass 3D positions and directions around. Also contains functions for doing common vector operations. 

So create new variable so we can set transform.position to this variable. 

Can use mousePosInBlocks to move paddle to correct position depending on where the mouse is

Vector3 paddlePos = new Vector3(0.5f, this.transform.position.y, 0f);
paddlePos.x  = mousePosInBlocks

this.transform.position = paddlePos;

To keep paddle within the game screen, use Mathf.Clamp

paddlePos.x = Mathf.Clamp(mousePosInBlocks, 0.5f, 15.5f) 

LAUNCHING BALL ON MOUSE CLICK

Create a script on the ball

Add a public Paddle field

Drag the paddle to that field in unity

Them must store distance between them 

The order of execution of scripts can affect things like this. 

Go to Edit -> Project Settings -> Script Execution Order

Adds scripts and set the order

Input.GetMouseButton(0) -> gets mouse click 0 for left click, 1 for right click, 2 for middle click for held buttons

Input.GetMouseButtonDown(0) -> for one click

To give ball velocity, need to access its rigidbody and apply a vector2 

this.rigidbody2D.velocity = new Vector2(2f, 10f); // deprecated

Instead must use 

GetComponent<RigidBody2D>()

INVISIBLE COLLIDERS AND GRAVITY

Add invisible walls instead of bringing in physical walls

Create new gameobject for playspace. Put it at top of hierarchy below camera

Place background in play space

Then create new gameobjects for walls

Add box colliders to these new objects. 
Give the colliders a size and a position/offset to put them in proper locations

Can change object's gravity, but it is best to keep a consistent gravity. 

Edit -> Project Settings -> Physics 2D

Can change the gravity of the whole game here. 

CREATING AND USING PREFABS

Prefabricated object -> a collection of predefined GameObjects & Components that are re-useable throughout the game

Create a Prefabs folder. 

Drag an sprite or object into that folder and you will create a prefab.

Can edit the prefab by changing information and removing scripts, then clicking apply under Prefab

Can put multiple on there. Best to organize objects with GameObject classes in the hierarchy

Acts as a template.

Updating the prefab will update all prefab objects

CTRL-D duplicate prefab

UNITY EDITOR SNAP TO GRID

For better alignment

Edit -> Snap Setings

Move bricks .5 Unit left and right

Can move use bricks locations and move them to figure out how far to move them yourself. Compare the new y to the old y

Move brick .32 up and down

Snap initially.

Use CTRL to move by grid. 

MAKING EVERYTHING A PREFAB

If everthing you like is the right settings. 

Then you can just drag them into the prefabs folder and reuse them. 

Can move a whole playspace to prefabs. A whole gameobject with sub children.

GAMEOBJECT.FINDOBJECTOFTYPE

Linking prefabs programmatically is helpful

Unity does not support "nested prefabs"

GameObject.FindObjectOfType<>()

this.paddle = GameObject.FindObjectOfType<Paddle>();
this.levelManager = GameOBject.FindObjectOfType<LevelManager>();

Put prefabs on grid to ensure they are there. 

LOADING LEVELS

Placing levels in build settings puts them in a specific order which can be iterated through.

public void LoadNextLevel() {
	Application.LoadLevel(Application.loadedLevel + 1);
}

So if you place win screen after all levels it should work. And then only go to lose screen on lose condition

DESTORYING OBJECT

Destroy (gameObject); // not this, because this is component script

CREATING AND IMPORTING SPRITE SHEETS

Sprite sheet is a sheet of sprites that are related to game. Like crumbling brick, or exploding object, or fire. 

If using an image editor, it must:
1. Support transparent backgrounds
2. Allow you to resize your "canvas"
3. Ideally support layers

Create sprite sheet. By putting many sprites on same image

In Sprite asset, select Sprite Mode: Multiple. 

Thnen go into sprite editor

Slice options -> top left

Because background space is transparent and images are spaced apart, then slice auto will automatically grab each image. 

Then name the sprites. 

SWAPPING SPRITES IN SCRIPT

Affordance -> player should know what to do next. Want multihit blocks to show progress. Player then knows to keep hitting them 

Can store sprites in array

public class Brick : MonoBehavior {
	public Sprint[] hitSprites;
}

In unity, can set the size of the array, and then drag sprites to fill the elements.

void LoadSprites() {
	int spriteIndex = timesHit - 1;
	this.GetComponent<SpriteRenderer>().sprite = hitSprites[spriteIndex];
}

CONSOLIDATING HIT COUNTING

Can set maxHits based on length of hitSprites. 

int maxHits = hitSprites.length + 1;

If sprite is none in array, the object will still exist on the the game but without a display

Can handle this by checking if sprite exists

TAGS

What about making an unbreakable block. 

Use tag for breakable blocks.

Add tag. Tag -> Add Tag...

Under Element 0 add Breakable. 

Select prefabs and give them Breakable tag. 

Then can duplicate prefab but remove breakable tag so it is invicible.

Check for tag in collision code

void OnCollisionEnter2D(Collision2d col) {
	bool breakable = (this.tag == "Breakable");
	if (isBreakable) {
		HandleHit();
	}
}

void HandleHit() {
	timesHit++;
	int maxhits = hitSprites.Length + 1;
	if (timesHit >= maxHits) {
		Destory (gameObject);
	} else {
		LoadSprites();
	}
}
}

STATICS TO DETECT WIN CONDITION

Loading Levels can be problematic

Static Brick may help
Keep track of breakable bricks in a level.
Create a simple BrickDestroyed "message"
Testing when 2 bricks destroyed at once. 

LevelManager should handle level loading. 

Add static variable to to Brick class to keep track of how many there are. 

static int breakableCount;

increment in Start() for brick after checking if brick isBreakable/

decremenet the count before you destory the brick. 

Can then add check in LevelManager to see if breakableCount <= 0. 

Have brick call that method when it is destroyed. 

ADDING SOUNDS ON IMPACT

Using audio.Play() -> for boing sound
Why AudioSource.PlayClipAtPoint is useful

Add an audio source component to an object (the ball). 

Then go into script for ball. 

Add audio.Play() to collisions. 

What if audio needs to be played after an object is destroyed. 

Use AudioSource.PlayClipAtPoint

public AudioClip crack;

Add sound to Brick script in all bricks you have. 

AudioSource.PlayClipAtPoint(crack, transform.position);

USING Random.Range()

Prevent boring loops. So ball can't just bounce up and down.

So tweak the velocity.

Random.Range(min, max)

Vector2 tweak = new Vector2 (Random.Range(0.0f, 0.2f), Random.Range(0f, 0.2f));

rigidbody.velocity += tweak;

AUTOMATED PLAY TESTING

Automate play to test game

Move mouse controls to its own method. 

Using a bool to select if autoplay

If autoplay, do ai controls

Find ball and move paddle's x position to ball's x position. 

private Ball ball;

this.ball = GameObject.FindObjectOfType<Ball>();

Vector3 paddlePos = new Vector3f(0.5f, this.transform.position.y, 0f);
Vector3 ballPos = ball.transform.positoin;
paddlePos.x = Mathf.Clamp(ballPos.x, 0.5f, 15.5f);
this.transform.position = paddlePos;

CHANGE VOLUME

Edit -> Project Settings -> Volume

Can also set volume in AudioSource.PlayClipAtPoint() // may be deprecated

DEBUGGING

Bug where after you die and start again, breakableCount has not been set to 0, so count will be wrong. 

MORE COMPLEX COLLIDERS

Box collider is flat, so not much variation in bounce

Can use a polygon collider to improve the game

In paddle prefab

Add Polygon Collider 2D. 

Use nodes to create shapes. 

Can edit, hold control, when red, delete a node. 

Chamfer paddle, ensure it stays in walls. 

MAKING CODE EXTENDABLE

Debug.LogError -> Add guard code in Brick.cs so that when a sprite is missing, you get an eror logged to the console. 

USING A PARTICLE SYSTEM AND INSTANTIATE

Make brick look like it goes up in smoke. Write code to trigger smoke puffs. Tweak smoke prefab while play testing

Particle Systems -> For effects like moving liquids, smoke, clouds, flames, and magic spells...particle systems can be used to capture the inherent fluidity and energy.

Put empty game object called Smoke. 

Add Component -> Particle System

Immediately see default particle system

Duration -> is how long it loops. Start life time equals how long particle lasts for

Emission -> how fast or how slow particles come out

Shape -> shape of particle system.

Use box for brick. 

Make it a prefab

Add it to brick

Add it to all brick prefabs

public GameObject smoke;

Set smoke's startColor to same as bricj. Test tha different bricks make different smoke.

Hint: color is from SpriteRenderer

Use Quarternion.identity for rotation

Instantiate() -> returns an object

Instantiate(smoke, gameObject.transform.position, Quarternion.identity);

//

GameObject smokePuff = Instantiate(smoke, gameObject.transform.position, Quarternion.identity) as GameObject;
smokePuff.particleSystem.startColor = gameObject.GetComponent<SpriteRenderer>().color;
