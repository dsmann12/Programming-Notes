POLYMORPHISM

Polymorphism - many forms. A derived class is a form of the base class. A specialization. Both can have methods of the same name with different functionality. Object oriented programs give ability to invoke specific object's method if part of class family.

Polymorphic interface is constructed using any number of virtual or abstract members. 

Virtual member - a member in a base class that defines a default implementation that may be changed (overridden) by a derived class.

Abstract method - a method in a base class that does no provide a default implementation but does provide a signature. 

Base Class With Virtual Method:

using System;

public class DrawingObject
{
    public virtual void Draw()
    {
        Console.WriteLine("I'm just a generic drawing object.");
    }
}

virtual - modifier that indicates to derived classes that they can override this method. 

Derived Classes With Override Methods:

using System;

public class Line : DrawingObject
{
    public override void Draw()
    {
        Console.WriteLine("I'm a Line.");
    }
}

public class Circle : DrawingObject
{
    public override void Draw()
    {
        Console.WriteLine("I'm a Circle.");
    }
}

public class Square : DrawingObject
{
    public override void Draw()
    {
        Console.WriteLine("I'm a Square.");
    }
}

override - modifier allows  a method to override the virtual method of its base class at run-time. Overriding methods must have same signature, name, and parameters as virtual base class method. 

Program Implementing Polymorphism:

using System;

public class DrawDemo
{
    public static int Main( )
    {
        DrawingObject[] dObj = new DrawingObject[4];

        dObj[0] = new Line();
        dObj[1] = new Circle();
        dObj[2] = new Square();
        dObj[3] = new DrawingObject();

        foreach (DrawingObject drawObj in dObj)
        {
            drawObj.Draw();
        }

        return 0;
    }
}

OUTPUT:

I'm a Line.
I'm a Circle.
I'm a Square.
I'm just a generic drawing object.

Compiled with:
csc DrawDemo.cs DrawingObject.cs Circle.cs Line.cs Square.cs
use mono instead on linux  

Can also seal selected methods instead of whole classes to make sure they cannot be overridden any further. 

sealed class PTSalesPerson : SalesPerson
{
public PTSalesPerson(string fullName, int age, int empID,
float currPay, string ssn, int numbOfSales)
:base (fullName, age, empID, currPay, ssn, numbOfSales)
{
}
 
// Compiler error! Can't override this method
// in the PTSalesPerson class, as it was sealed.
public override void GiveBonus(float amount)
{
}
}

ABSTRACT CLASSES

Classes that cannot be instantiated and contain empty methods with only signatures and no definition. 

Although cannot directly create an instance of an abstract class, it is still assembled in memory when derived
classes are created. Thus, it is perfectly find (and common) for abstract classes to define any number of 
constractors that are called *indirectly* whe derived classes are allocated. 

May define any number of abstract methods. Abstract methods do not supply a defauly implementation but must be
implemented by derived classes. 

abstract class Shape
{
// Force all child classes to define how to be rendered.
public abstract void Draw();
...
}

// If we did not implement the abstract Draw() method, Circle would also be
// considered abstract, and would have to be marked abstract!
class Circle : Shape
{
public Circle() {}
public Circle(string name) : base(name) {}
public override void Draw()
{
Console.WriteLine("Drawing {0} the Circle", PetName);
}
}

MEMBER SHADOWING

Shadowing - the opposite of method overriding. If a derived class defines a member that is identical to a 
member defined in a base class, the derived class has shadowed the parent's version. 

If you have a new class and try to make it inherit from a base class, is new class has method named the same 
as base class, then new method will hide base class implementation. To make it override, must add override
keyword.

Otherwise can add new keyword to essentially say to ignore the parent class implementation. 
