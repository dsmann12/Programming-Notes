ANONYMOUS TYPES

Sometimes want to define a class simply to model a set of encapsulated data points without any associated methods, events, 
or other specialized functoinality. If type is only used by a handful of ethods it would be a bother to define a full 
class definition. 

DEFINING ANONYMOUS TYPE

You use a var keyword in conjunction with object initialization syntax. You must use the var keyword because the compiler 
will automatically generate a new class definition at compile time (and will never see name of this class in C# code). The
initialization syntax is used to tell the compiler to create private backing fields and (read-only) properties for newly 
created type. 

static void BuildAnonType( string make, string color, int currSp )
{
// Build anon type using incoming args.
var car = new { Make = make, Color = color, Speed = currSp };
// Note you can now use this type to get the property data!
Console.WriteLine("You have a {0} {1} going {2} MPH",
car.Color, car.Make, car.Speed);
 
// Anon types have custom implementations of each virtual
// method of System.Object. For example:
Console.WriteLine("ToString() == {0}", car.ToString());
}

static void Main(string[] args)
{
Console.WriteLine("***** Fun with Anonymous Types *****\n");
 
// Make an anonymous type representing a car.
var myCar = new { Color = "Bright Pink", Make = "Saab", CurrentSpeed = 55 };
 
// Now show the color and make.
Console.WriteLine("My car is a {0} {1}.", myCar.Color, myCar.Make);
 
// Now call our helper method to build anonymous type via args.
BuildAnonType("BMW", "Black", 90);
 
Console.ReadLine();
}

A way to whip up a new data type on the fly. 

INTERNAL REPRESENTATION OF ANONYMOUS TYPES

All anonymous types are automatically derived from System.Object and therefore support each of the members provided by the 
base class. Given this, you could invoke ToString(), GetHashCode(), Equals(), or GetType() on the implicitly typed myCar 
object. 

static void ReflectOverAnonymousType(object obj)
{
Console.WriteLine("obj is an instance of: {0}", obj.GetType().Name);
Console.WriteLine("Base class of {0} is {1}",
obj.GetType().Name,
obj.GetType().BaseType);
Console.WriteLine("obj.ToString() == {0}", obj.ToString());
Console.WriteLine("obj.GetHashCode() == {0}", obj.GetHashCode());
Console.WriteLine();
}

static void Main(string[] args)
{
Console.WriteLine("***** Fun with Anonymous Types *****\n");
 
// Make an anonymous type representing a car.
var myCar = new {Color = "Bright Pink", Make = "Saab", CurrentSpeed = 55};
 
// Reflect over what the compiler generated.
ReflectOverAnonymousType(myCar);
...
 
Console.ReadLine();
}

***** Fun with Anonymous Types *****
 
obj is an instance of: <>f__AnonymousType0`3
Base class of <>f__AnonymousType0`3 is System.Object
obj.ToString() = { Color = Bright Pink, Make = Saab, CurrentSpeed = 55 }
obj.GetHashCode() = -439083487

First, notice that, in this example, the myCar object is of type <>f AnonymousType0`3 (your name may
differ). Remember that the assigned type name is completely determined by the compiler and is not directly
accessible in your C# code base.

Perhaps most important, notice that each name-value pair defined using the object initialization syntax
is mapped to an identically named read-only property and a corresponding private read-only backing field.
The following C# code approximates the compiler-generated class used to represent the myCar object (which
again can be verified using ildasm.exe):

nternal sealed class <>f__AnonymousType0<<Color>j__TPar,
<Make>j__TPar, <CurrentSpeed>j__TPar>
{
// Read-only fields.
private readonly <Color>j__TPar <Color>i__Field;
private readonly <CurrentSpeed>j__TPar <CurrentSpeed>i__Field;
private readonly <Make>j__TPar <Make>i__Field;
 
// Default constructor.
public <>f__AnonymousType0(<Color>j__TPar Color,
<Make>j__TPar Make, <CurrentSpeed>j__TPar CurrentSpeed);
// Overridden methods.
public override bool Equals(object value);
public override int GetHashCode();
public override string ToString(c <Color>j__TPar Color { get; }
public <CurrentSpeed>j__TPar CurrentSpeed { get; }
public <Make>j__TPar Make { get; }
});

IMPLEMENTATION OF TOSTRING() AND GETHASHCODE()

All anonymous types automatically derive from System.Object and are provided with an overridden version
of Equals(), GetHashCode(), and ToString(). The ToString() implementation simply builds a string from
each name-value pair. Here’s an example:

public override string ToString()
{
StringBuilder builder = new StringBuilder();
builder.Append("{ Color = ");
builder.Append(this.<Color>i__Field);
builder.Append(", Make = ");
builder.Append(this.<Make>i__Field);
builder.Append(", CurrentSpeed = ");
builder.Append(this.<CurrentSpeed>i__Field);
builder.Append(" }");
return builder.ToString();
}

The GetHashCode() implementation computes a hash value using each anonymous type’s
member variables as input to the System.Collections.Generic.EqualityComparer<T> type. Using this
implementation of GetHashCode(), two anonymous types will yield the same hash value if (and only if )
they have the same set of properties that have been assigned the same values. Given this implementation,
anonymous types are well-suited to be contained within a Hashtable container.

SEMANTICS OF EQUALITY FOR ANONYMOUS TYPES

static void EqualityTest()
{
// Make 2 anonymous classes with identical name/value pairs.
var firstCar = new { Color = "Bright Pink", Make = "Saab", CurrentSpeed = 55 };
var secondCar = new { Color = "Bright Pink", Make = "Saab", CurrentSpeed = 55 };
 
// Are they considered equal when using Equals()?
if (firstCar.Equals(secondCar))
Console.WriteLine("Same anonymous object!");
else
Console.WriteLine("Not the same anonymous object!");
// Are they considered equal when using ==?
if (firstCar == secondCar)
Console.WriteLine("Same anonymous object!");
else
Console.WriteLine("Not the same anonymous object!");
 
// Are these objects the same underlying type?
if (firstCar.GetType().Name == secondCar.GetType().Name)
Console.WriteLine("We are both the same type!");
else
Console.WriteLine("We are different types!");
 
// Show all the details.
Console.WriteLine();
ReflectOverAnonymousType(firstCar);
ReflectOverAnonymousType(secondCar);
}

My car is a Bright Pink Saab.
You have a Black BMW going 90 MPH
ToString() == { Make = BMW, Color = Black, Speed = 90 }
 
Same anonymous object!
Not the same anonymous object!
We are both the same type!
 
obj is an instance of: <>f__AnonymousType0`3
Base class of <>f__AnonymousType0`3 is System.Object
obj.ToString() == { Color = Bright Pink, Make = Saab, CurrentSpeed = 55 }
obj.GetHashCode() == -439083487
 
obj is an instance of: <>f__AnonymousType0`3
Base class of <>f__AnonymousType0`3 is System.Object
obj.ToString() == { Color = Bright Pink, Make = Saab, CurrentSpeed = 55 }
obj.GetHashCode() == -439083487

ANONYMOUS TYPES CONTAINING ANONYMOUS TYPES

Possible to create an anonymous type that is composed of other anonymous types. 

// Make an anonymous type that is composed of another.
var purchaseItem = new {
TimeBought = DateTime.Now,
ItemBought = new {Color = "Red", Make = "Saab", CurrentSpeed = 55},
Price = 34.000};

Anonmyous types used sparingly, typically only when making use of LINQ technology set. 

•	 You don’t control the name of the anonymous type.
•	 Anonymous types always extend System.Object.
•	 The fields and properties of an anonymous type are always read-only.
•	 Anonymous types cannot support events, custom methods, custom operators, or
	 custom overrides.
•	 Anonymous types are always implicitly sealed.
•	 Anonymous types are always created using the default constructor.


