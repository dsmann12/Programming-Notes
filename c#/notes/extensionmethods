EXTENSION METHODS

Extension methods - allow you to add new methods or properties to a class or structure without modifying the original type in
any direct manner. 

Why?

1. Say have a class in production. It becomes clear over time that this class should support a handful of new members. If you 
modify the current class definition directly, you risk possibility of breaking backward compatibility with older code bases 
making use of it. as they might not have been compiled with the latest and greatest class definition. 

2. If structure or sealed class and want to add new members so it behaves polymorphically in system. Cannot be extended so 
would have to add members to type which risks backwards compatibility. 

Extension methods let you modify types without subclassing and without modifying the type directly. 

DEFINING EXTENSIONS METHDOS

Must be defined within a static class so must be declared with static keyword. Secondly, all extension methods are marked as
such by using the this keyword as a modifier on the first parameter of the method in question. The this qualified parameter 
represents the item being extended. 

EXAMPLE:

First extension method allows any object to use a new method named DisplayDefiningAssembly() that makes us of types in the 
System.Reflection namespace to display name of assembly containing type in question. Second method named ReverseDigits() allows
any int to obtain a new version of itself where the value is reversed digit by digit. 

static class MyExtensions
{
// This method allows any object to display the assembly
// it is defined in.
public static void DisplayDefiningAssembly(this object obj)
{
Console.WriteLine("{0} lives here: => {1}\n", obj.GetType().Name,
Assembly.GetAssembly(obj.GetType()).GetName().Name);
}
 
// This method allows any integer to reverse its digits.
// For example, 56 would return 65.
public static int ReverseDigits(this int i)
{
// Translate int into a string, and then
// get all the characters.
char[] digits = i.ToString().ToCharArray();
 
// Now reverse items in the array.
Array.Reverse(digits);
 
// Put back into string.
string newDigits = new string(digits);
 
// Finally, return the modified string back as an int.
return int.Parse(newDigits);
}
}

It is always the case that the first parameter of an extension
method represents the type being extended. Given that DisplayDefiningAssembly() has been prototyped
to extend System.Object, every type now has this new member, as Object is the parent to all types in the
.NET platform. However, ReverseDigits() has been prototyped to extend only integer types; therefore, if
anything other than an integer attempts to invoke this method, you will receive a compile-time error.

INVOKING EXTENSION METHODS

static void Main(string[] args)
{
Console.WriteLine("***** Fun with Extension Methods *****\n");
 
// The int has assumed a new identity!
int myInt = 12345678;
myInt.DisplayDefiningAssembly();
 
// So has the DataSet!
System.Data.DataSet d = new System.Data.DataSet();
d.DisplayDefiningAssembly();
 
// And the SoundPlayer!
System.Media.SoundPlayer sp = new System.Media.SoundPlayer();
sp.DisplayDefiningAssembly();
 
// Use new integer functionality.
Console.WriteLine("Value of myInt: {0}", myInt);
Console.WriteLine("Reversed digits of myInt: {0}", myInt.ReverseDigits());
 
Console.ReadLine();
}

***** Fun with Extension Methods *****
 
Int32 lives here: => mscorlib
 
DataSet lives here: => System.Data
 
SoundPlayer lives here: => System
 
Value of myInt: 12345678
Reversed digits of myInt: 87654321

IMPORTING EXTENSION METHODS

If namespace where extension methods defined is differnt from namespace using them, will need to make using of using keyword. 

Extension methods are limited to namespaces that define them or namespaces that import them. 

namespace MyExtensionMethods
{
static class MyExtensions
{
...
}
}

EXTENDING TYPES IMPLEMENTING SPECIFIC INTERFACES

Possible to define an extension method that can only extend a class or structure that implements the correct interface. 

static class AnnoyingExtensions
{
public static void PrintDataAndBeep(this System.Collections.IEnumerable iterator)
{
foreach (var item in iterator)
{
Console.WriteLine(item);
Console.Beep();
}
}
}

static void Main( string[] args )
{
Console.WriteLine("***** Extending Interface Compatible Types *****\n");
 
// System.Array implements IEnumerable!
string[] data = { "Wow", "this", "is", "sort", "of", "annoying",
"but", "in", "a", "weird", "way", "fun!"};
data.PrintDataAndBeep();
 
Console.WriteLine();
 
// List<T> implements IEnumerable!
List<int> myInts = new List<int>() {10, 15, 20};
myInts.PrintDataAndBeep();
 
Console.ReadLine();
}
