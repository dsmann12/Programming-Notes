HEROKU

Download CLI tools

heroku login - to login and enter credentials

heroku apps --all -> show all apps

heroku create -> prepares an app on Heroku to receive source code.

When created, a git remote (called heroku) is created and associated with the local git repository. Heroku generates a random name for app or can pass a paremter to specify your own app name.

Deploy code. 

git push heroku master

App is now deployed. Ensure that at least one instance of app is running. 

heroku ps:scale web=1

Now visit app at URL generated by its app name. 

Also can open with:

heroku open

VIEW LOEGS

Heroku treats logs as streams of time-ordered events aggregated from the output streams of all your app and Heroku component, providing a single channel for all of the events

View info about running app using one of the logging commands

heroku logs --tail

DEFINE A PROCFILE

Use a Procfile, a text file in the root directory of application to explicity declare what command should be executed to start the app

In example it looks like this:

web: gunicorn gettingstarted.wsgi --log-file -

This declares a single process type, web, and the command needed to run it. The name web declares that this process type will be attached to the HTTP routing stack of Heroku and receive web traffic when deployed. 

Procfiles can contain additional process types. Example, you might declare one for a background worker process that processe items off a queue. 

Sample app has additional Procfile for local development on Windows, located in file Procfile.windows. Starsts webserver compatible with Windows. 

web: python manage.py runserver 0.0.0.0:5000

SCALE THE APP

Right now, app is running on a single web *dyno* - a lightweight container that runs the command specified in Procfile. 

Can check how many dynos are running using the ps command

heroku ps

By default, app is deployed on a free dyno. Free dynos will sleep after a half hour of inactivity (if no traffic). Causes a delay of a few seconds for the first request upon waking. Free dynos also consume from a monthly, account level quota of free dyno hours - as long as quota is not exhausted, apps can continue to run. 

To avoid dyno sleeping, you can upgrade to a hobby or professional dyno type. 

If migrate app to a professional dyno, can easily scale it by running a command telling Heroku to execute a specific number of dynos, each running your web process type.

Scaling an app on Heroku is equivalent to changing the number of dynos running. 

Scale number of web dynos to 0

heroku ps:scale web=0

If try to access app again on web tab or heroku open, you will get an error message because no longer have any web dynos available to serve requests

Scale it up again

heroku ps:scale web=1

Scaling to more than 1 required a non-free account.

DECLARE APP DEPENDENCIES

Heroku recognizes app as a Python app by existence of a Pipfile or requirements.txt file in root directory. 

Pipfile looks something like:

[[source]]
url = "https://pypi.python.org/simple"
verify_ssl = true

[packages]
dj-database-url = "*"
django = "*"
gunicorn = "*"
psycopg2 = "*"
whitenoise = "*"

[requires]
python_version = "3.6"⏎

The Pipfile lists app dependencies together with their versions. When app is deployed, Heroku reads this file and installs the appropriate Python dependenceis using the pipenv install --system --skip-lock command.

To do this locally, use Pipenv to create a virtualenv and install dependencies

pipenv --three
pipenv install

To specify specific python executable,
pipenv --python python3.6 --three

Note: Postgres must be properly installed in order for this to work properly
Note: If running Linux, the libpq-dev system package must be installed

Then activate the virtualenv

pipenv shell

Once dependencies are installed, you can run the app locally

RUN THE APP LOCALLY

App almost ready to start locally. Django uses local assets so first need to run collectstatic

python manage.py collectstatic

Respond with 'yes'

Now start application using heroku local.

heroku local web

On windows:
heroku local web -f Procfile.windows

Should see app running.

Go to localhost:5000 to see app running locally. 

Ctrl-C to close it.c

PUSH LOCAL CHANGES

In this step, learn how to propagate a localchange to the app through to Heroku. 

Example: ad an additional dependency and code to use it.

Install requests locally

pipenv install requests

Modify hello/views.py so that it imports the requests module at the start

import requests

Then modify index ethod to make use of module. 

def index(request):
	r = requests.get('http//httpbin.org/status/418')
	print(r.text)
	return HttpResponse('<pre>' + r.text + '</pre>')

Now test locally

heroku local

To deploy

Add modified files to local git repo

git add .

Now commit changes to repo

git commit -m "Demo"

Now deploy

git push heroku master

Then check

heroku open

PROVISION ADD ONS

Add ons are third pary cloud services that provide out-of-the-box additional services for app, from persistence through logging to monitoring and more.

By default, Heroku stores 1500 lines of logs from app. however it makes the full log stream available as a service - and several add on providers ave written logging services that provide things such as log persistence, search, and email and SMS alerts.

Provisoin on these loggin add-ons, Papertrail

heroku addons:create papertrail

To help abuse prevention, provision an add-on requires account verification. 

Add on is now deployed and configured for application.

Can list add-ons

heroku addons

To see particular add-on in action, visit app's Heroku URL a few times. Each visit will generate more log messages which should now get routes to papertrail add on. Visit papertrail console to see log messages

heroku addones:open papertrail

Browser will open a Papertrail web console, showing latest log events. Interface lets you search and set up alerts.

START A CONSOLE

Can run a command (scripts and apps part of yout app) in a one-off dyno using heroku run command

heroku run

Can also be used to launch a REPL process attached to your local terminal for experimentingg in app's environment.

heroku run python manage.py shell

If receive an error, "Error connecting to process", then may need to configure firewall.

Python shell is running in context of app and all its dependencies. Can import some of your app files. 

For example:

>>> import requests
>>> print(requests.get('http://httpbin.org/status/418').text)

    -=[ teapot ]=-

       _...._
     .'  _ _ `.
    | ."` ^ `". _,
    \_;`"---"`|//
      |       ;/
      \_     _/
        `"""`
>>> exit()

Can create another one-off dyno and run the bash command which opens a shell on that dyno. Can then execute commands there. Each dyno has its own ephemeral filspace, populated with app and its dependencies. Once the command completes, the dyno is removed.

heroku run bash

DEFINING config vars

Heroku lets you externalise configuration - storing data such as encryption keys or external resources in config vars

At runtime, config vars are exposed as environment variables to the app

Edit hello/views.py. At beginning, add a line to import os module

import os

Now modify index mtehod so it repeats an action depending on value of TIMES environment variable

def index(request):
	times = int(os.environ.get('TIMES', 3))
	return HttpResponse('Hello! ' * times)

heroku local will automatically set up the environment based on contents of the .env file in your local directory. In top level directory of project, there is already a .env that has following contents

TIMES = 2

If run app with heroku local, you'll see two "Hello!"s. 

To set the config var on Heroku, execute the following:

heroku config:set TIMES=2

View config vars that are set using heroku config

PROVISION A DATABASE

The add-on marketplace has large number of data stores, from Redis and MongoDB provides to PostgreSQL and MySQL. There is free Heroku Postgres add on that was automatically provisions when app was deployed.

A database is an add-on so you can find out more about database provisisions for your app using the addons command

heroku addons

Listing the config vars for your app wil display the URL that your app is using to connect to the database

heroku config

DATABASE_URL

Heroku also provides a pg command that shows a lot more

Indiccates what type of database plan (Hobby-dev), what postgres version(9.6) with single row of data. 

Example app deployed has database functionality, which you should be able to reach by visiting your app's URL and appending /db then visit 'https://wonderfun-app-287.herokuapp.com/db

Accessing it will yield an error though, becausae while database is configured, the tables have not been created. Run the standard Django manage.py migrate to create the tables

If you see a message that says, “You just installed Django’s auth system, which means you don’t have any superusers defined. Would you like to create one now?”, type no.

Now access /db route

Now access \db route again and you'll see simple page pdate every time you access it

Page View Report

April 19, 2017, 8:50 a.m.
April 19, 2017, 8:52 a.m.

Code to access the database is straigtforward and makes use of simple Django model called Greetings found in hello/models.py

Only configuration necessary can be found in gettingstarted/settings.py which sets up the database based on the environment variable DATABASE_URL

# Parse database configuration from $DATABASE_URL
import dj_database_url
...
db_from_env = dj_database_url.config(conn_max_age=500)
DATABASES['default'].update(db_from_env)


Whenver visit the /db route, the following method in hello/views.py file is invoked which creates a new Greeting and then renders all existing Greetings:

def db(request):

    greeting = Greeting()
    greeting.save()

    greetings = Greeting.objects.all()

    return render(request, 'db.html', {'greetings': greetings})

Assuming you have Postgres installed locally, use the heroku pg:psql command to connect to remote database and see all the rows

heroku pg:psql

=>select * from hello_greeting;

NEXT STEPS

Recommended reading:

Article for firmer understanding of basics. How Heroku Works for technical overview of concepts you'll encounter while writing, configuring, deploying, and running apps

Read Deploying Python and Django Apps on Heroku to understand how to take an existing Python or Django app and deploy it on Heroku

Visit Python Category to learn more about developeing and deploying Python apps
