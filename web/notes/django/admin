DJANGO ADMIN



Philosophy

Generating admin sites for your staff or clients to add, change, and delete content is tedious work that doesn’t require much creativity. For that reason, Django entirely automates creation of admin interfaces for models.

Django was written in a newsroom environment, with a very clear separation between “content publishers” and the “public” site. Site managers use the system to add news stories, events, sports scores, etc., and that content is displayed on the public site. Django solves the problem of creating a unified interface for site administrators to edit content.

The admin isn’t intended to be used by site visitors. It’s for site managers.


Creating an admin user

python manage.py createsuperuser

Then enter desired username and press enter

Username: admin

Then will be prompted for desired email address:

Email address: admin@example.com

Final step is to enter password. Will be asked to enter it twice:

Password: **********
Password (again): *********
Superuser created successfully.

The Django admin site is activated by default. Start development server and explore it. 

python manage.py runserver

Go to http://127.0.0.1:8000/admin to see it

Can log in with superuser account created in previous step

groups and users. Provided by django.contrib.auth, the authentication framework shipped with Django

Make pol app modifiable in the admin

Need to tell admin that Questoin objects have an admin interface:

polls/admin.py

from django.contrib import admin

from .models import Question

admin.site.register(Question)

Now, Django dislays Questions in admin. Can add questions or update them. 

Things to note here:

    The form is automatically generated from the Question model.
    The different model field types (DateTimeField, CharField) correspond to the appropriate HTML input widget. Each type of field knows how to display itself in the Django admin.
    Each DateTimeField gets free JavaScript shortcuts. Dates get a “Today” shortcut and calendar popup, and times get a “Now” shortcut and a convenient popup that lists commonly entered times.

The bottom part of the page gives you a couple of options:

    Save – Saves changes and returns to the change-list page for this type of object.
    Save and continue editing – Saves changes and reloads the admin page for this object.
    Save and add another – Saves changes and loads a new, blank form for this type of object.
    Delete – Displays a delete confirmation page.

CUSTOMIZE

By registering the Question model with admin.site.register(Question), Django was able to construct a default form representation. Can customzie how admin form looks and works by telling Django the options you want when register the object. 

polls/admin.py

from django.contrib import admin

from .models import Question


class QuestionAdmin(admin.ModelAdmin):
    fields = ['pub_date', 'question_text']

admin.site.register(Question, QuestionAdmin)

You'll find this pattern whenver you need to change admin options for a model. 

This particular change makes the publications date come before the question field. 

May want to split form into fieldsets::

polls/admin.py

from django.contrib import admin

from .models import Question


class QuestionAdmin(admin.ModelAdmin):
    fieldsets = [
        (None,               {'fields': ['question_text']}),
        ('Date information', {'fields': ['pub_date']}),
    ]

admin.site.register(Question, QuestionAdmin)

ADDING RELATED OBJECTS

Question has multiple Choices. 

First, can register Choice with admin just as we did with Question. 

In that form, the Question field is a select box containing every question in the database. Django knows that a ForeignKey should be represented in the admin as a <select> box. Every object with ForeignKey relationship also gets Add Another link. 

Second, can add Choices in Question edit page. Tell Django to set off room to add 3. 

polls/admin.py

from django.contrib import admin

from .models import Choice, Question


class ChoiceInline(admin.StackedInline):
    model = Choice
    extra = 3


class QuestionAdmin(admin.ModelAdmin):
    fieldsets = [
        (None,               {'fields': ['question_text']}),
        ('Date information', {'fields': ['pub_date'], 'classes': ['collapse']}),
    ]
    inlines = [ChoiceInline]

admin.site.register(Question, QuestionAdmin)

One small problem. It takes a lot of screen space to display all the fields for entering related Choice objects. So Django offerse tabuar way of displaying inline related objects. Just need to change the ChoiceInline declaration to:

class ChoiceInline(admin.TabularInline):
    #...

CUSTOMIZING THE ADMIN CHANGE LIST

Cusotmize the page that dispays all questions in system. 

By defaut, Django displays the str() of each object. But sometimes, it's more helpful to display individual fields. To do that, use the list_display admin option, which is a tuple of field names to display, as columns, on the change list page for the object. 

polls/admin.py

class QuestionAdmin(admin.ModelAdmin):
    # ...
    list_display = ('question_text', 'pub_date', 'was_published_recently')

Can click on column headers to sort by those values. Escept was_published_recently because sorting by the output of an arbitrary method is not supported. 

Can improve that by adding a few attributes to polls/models.py

class Question(models.Model):
    # ...
    def was_published_recently(self):
        now = timezone.now()
        return now - datetime.timedelta(days=1) <= self.pub_date <= now
    was_published_recently.admin_order_field = 'pub_date'
    was_published_recently.boolean = True
    was_published_recently.short_description = 'Published recently?'

See docs on list_dispay for more info. 

Can add filers using the list_filter in polls/admin.py

list_filter = ['pub_date']

Adds a Filter to sidebar that lets pepol filter the change list by the pub_date field.

Can add search field

search_fields = ['question_text']

Adds search box to top. Will search the question_text field. Can use as many fields as you like. Uses a LIKE query behind the scenes. 

Chage list gives default pagination. Default is o display 100 per page. 

CUSTOMIZE ADMIN LOOK AND FEEL

Customize Project's Templates

Create templates directory in project directory (one that contains manage.py). 

Open settings file (mysite/settings.py) and add a DIRS option in TEMPLATES settings. 

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

DIRS is a list of filesystem directories to check when loading Django templates. 

Now create a directory called admin inside templates. Copy the template admin/base_site.html from within the default Django admin template directory in the source code of Django itself (django/contrib/admin/templats) into that directory. 
