Static Files

Add a stylesheet and image

Aside from HTML generated by the server, web apps generally need to serve additional files -- such as images, JS, or CSS - neessary to render the complete web page. Referred to as static files. 

For large projects, especially those comprise dof multiple aps, dealing with the multiple sets of static files provided by each application starts to get tricky. 

django.contrib.staticfiles - there to collect static files from each of your applications (and any other places you specify) into a single clocation that can easily be served in production. 

UPDATING LOOK AND FEEL

First, create a directory called static in polls directory. Django will look for static files there. 

Django's STATICFILES_FINDERS setting contains a list of finders that know how to discover static files from various sources. One of the defaults is AppDirectoriesFinder which looks for a "static" subdirectory in each of the INSTALLED_APPS like the one in polls. The admin site uses the same directory structure for its static files. 

Within static directory, create another directory called polls, and within that create a file called style.css. 

Because of how AppDirectoriesFinder works, you can refer to this static file in Django simply as polls/style.css

Put this in polls/static/polls/style.css

li a {
    color: green;
}

Then add following to polls/templates/polls/index.html

{% load static %}

<link rel="stylesheet" type="text/css" href="{% static 'polls/style.css' %}" />

The {% static %} template tag generates the absolute URL of static files. 

Adding a background image:

Now create a subdirectory for images. Create images subdirectory in the polls/static/polls directory. Inside this directory put an image called background.gif

Then add to stylesheet:

body {
    background: white url("images/background.gif") no-repeat right bottom;
}

Warning

Of course the {% static %} template tag is not available for use in static files like your stylesheet which arenâ€™t generated by Django. You should always use relative paths to link your static files between each other, because then you can change STATIC_URL (used by the static template tag to generate its URLs) without having to modify a bunch of paths in your static files as well.

