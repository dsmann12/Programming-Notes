EVENTS AND EVENT EMITTER

EVENTS

Good portion of core node modules are built on top of events.

Events - something that has happened in our app that we can respond to. Two different kinds in node. 

Tendency to think of both kinds as one kind, but they are two separate things. 

System events - c++ core. libuv. Library of c++ code that deals with events from computer os. File is open, finished reading, got data from network.

Custom events - javascript core. Event emitter. js code can react when something happens. 

Never really see libuv. It sends messages to js. When event occurs in libuv it generates js code. 

Js does not have event object. Create event library to get around this. 

Javascript core is what modules are built on top of. 

Can build another event emitter to so how it is done. 

NODE EVENT EMITTER

Event listener - coede that responds to an event.Listener typically a function

emitter.js

function Emitter() {
	this.events = {};
	
}

Emitter.prototype.on = function(type, listener) {
	this.events[type] = this.events[type] || []; // ensure property is an array
	this.events[type].push(listener)
}

Emitter.prototype.emit = function(type) {
	if (this.events[type]) {
		this.events[type].forEach(function(listener) {
			listener();
		});
	}
}

app.js

var Emitter = require('./emitter');

var emtr = new Emitter();

emtr.on('greet', function() {
	console.log('Somwhere, someone said hello');
}

emtr.on('greet'), function() {
	console.log('A greeting occurred!');
}

Console.log('Hello');
emtr.emit('greet');

No need for if..else all over code. Can create event emitter. 

In node, it follows the same ides. 

Can see node event emitter in events.js in node standard files. 

Can use same code except use require('events');

var Emitter = require('events');

Relies on magic string - a string that has some special meaing in our code. Bad cause makes it easy to have a type cause bug. 

Can make an object somewhere to abstract event types

module.exports = {
	events: {
		GREET: 'greet',
	}
}

var eventConfig = require('./config').events;

OBJECT.CREATE AND PROTOTYPES

Prototypal inheritance - every object has prototypes and obj can object those properties directly. 

Object has access to any of properties and methods as all of its prototypes

// an object
var person = {
	firstname: '',
	lastname: '',
	greet: function() {
		return this.firstname + ' ' this.lastname;
	}
}

// create object with person prototype
var john = Object.create(person);
// overwrite prototype properties. Properties are on john object now. Will not look in prototype
// for firstname and lastname properties
john.firstname = 'John';
john.lastname = 'Doe';

var jane = Object.create(person);
jane.firstname = 'Jane';
jane.lastname = 'Doe';

john.greet();
jane.greet();

Simple and clear way of setting up objects to inherit.

Each object prortypes to person but has firstname and lastname that hide prototype. 

INHERTING FROM EVENT EMITTER

Within util.js there is method inherits that takes constructor for object, and constructor of properties you want to add.

Puts a prototype between two objects whose prototype is object want to add properties from. 

var EventEmitter = require('events');
var util = require('util');

function Greetr() {
	this.greeting = 'Hello world';
}

Any object created by greetr should also have event emitter properties
util.inherits(Greetr, EventEmitter);

// add function to prototype. Prototype's prototype is EventEmitter so has access to emit
Greetr.prototype.greet = function() {
	console.log(this.greeting);
	this.emit('greet');
}

var greeter1 = new Greetrr();

greeter1.on('greet', function() {
	console.log('someone greeted');
});

// writes greeting and then logs that someone greeted
greeter1.greet();


Want if want to pass data to all listeneres. 
Greetr.prototype.greet = function(data) {
	console.log(this.greeting + ': ' + data);
	this.emit('greet', data);
}

greeter1.on('greet', function(data) {
	console.log('someone greeted: ' + data);
}
	

greeter1.greet('Tony');

NODE, ES6, AND TEMPLATE LITERALS

ES6 - ECMAScript 2015. Newish version of JS. Latest version of Node has latest version of v8. Latest version of v8 has better support for ES6. Some users may use older browsers that do not have ES6 support. 

babeljs.io -> converts ES6 into older JS. Good in browsers when need to support older browser. 

May need jsconfig.json file in project folder. 

{
	"compilerOptions": {
		"target": "ES6",
	}
}

Template literal - a way to concatenate JS in ES6. 

var name = 'David'
var greet = 'Hello' + name;
var greet2 = `Hello ${name}`

.CALL AND .APPLY

var obj = {
	name: 'David',
	greet: function() {
		console.log(`Hello ${this.name}`);
	}
}

obj.greet();

// invokes function
obj.greet.call();

Can pass a variable. Whatever you pass, this is what the "this" keyword will refer to

// writes 'Hello dsmann'
obj.greet.call({name: 'dsmann'});

// does the same
obj.greet.apply({name: 'dsmann'});

Only difference is that to pass parameters to the functions, you use a comma separated values for call and an array of values for apply. 

// writes 'Hello dsmann'
obj.greet.call({name: 'dsmann'}, value1, value2);

// does the same
obj.greet.apply({name: 'dsmann'}, [value1, value2]);

INHERITING FROM EVENT EMITTER PT 2

One scenario not covered. Inside object constructor, can add new properties to top level object. 

What if EventEmitter adds properties directly to new object, not necessarily prototype. Well we wouldn't be including those.

function Greetr() {
	// calls event emitter constructor and passes the current object as this. This makes the
	// current object the this context during the constructor. So any top level properties
	// will be added directly to this object. This refers to the new object being created
	// by Greetr() constructor
	EventEmitter.call(this);
	// this simply adds greeting property to this object
	this.greeting = 'Hello world!';
}

This is like a super constructor

Can also use apply()

This is because inherits only attaches what is on prototypes of constructors. Only properties that should be available to all objects

ES6 CLASSES

Are just syntactic sugar

'use string'; // JS engine becomes pickier about what it will let you do. Sometimes have to opt in to features

class Person {
	constructor(firstname, lastname) {
		this.firstname = firstname;
		this.lastname = lastname;
	}

	greet() {
		console.log('Hello ' + firstname + ' ' + lastname);
	}
}

Still have Person object and constructor that works in new

All other methods are added to prototype of object

This is different from other languages like Java, C++. 

INHERITING FROM EVENT EMITTER PT 3

Previously created Greetr constructor with using .call on EventEmitter constructor within to attach all properties to object

Can do similarly with ES6

class Greetr extends EventEmitter {
	constructor() {
		super();
		this.greeting = 'Hello world!';
	}

	greet(data) {
		console.log(`${this.greeting} : ${data}`);
		this.emit('greet', data);
	}
}

extends makes EventEmitter a prototype and uses super() to call its constructor on this new obejct.

Can use this in module too.

module.exports = class Greetr extends EventEmitter {
	constructor() {
		super();
		this.greeting = 'Hello world!';
	}

	greet(data) {
		console.log(`${this.greeting} : ${data}`);
		this.emit('greet', data);
	}
}

var greetr = require('./greetr');
