EVENTS AND EVENT EMITTER

EVENTS

Good portion of core node modules are built on top of events.

Events - something that has happened in our app that we can respond to. Two different kinds in node. 

Tendency to think of both kinds as one kind, but they are two separate things. 

System events - c++ core. libuv. Library of c++ code that deals with events from computer os. File is open, finished reading, got data from network.

Custom events - javascript core. Event emitter. js code can react when something happens. 

Never really see libuv. It sends messages to js. When event occurs in libuv it generates js code. 

Js does not have event object. Create event library to get around this. 

Javascript core is what modules are built on top of. 

Can build another event emitter to so how it is done. 

NODE EVENT EMITTER

Event listener - coede that responds to an event.Listener typically a function

emitter.js

function Emitter() {
	this.events = {};
	
}

Emitter.prototype.on = function(type, listener) {
	this.events[type] = this.events[type] || []; // ensure property is an array
	this.events[type].push(listener)
}

Emitter.prototype.emit = function(type) {
	if (this.events[type]) {
		this.events[type].forEach(function(listener) {
			listener();
		});
	}
}

app.js

var Emitter = require('./emitter');

var emtr = new Emitter();

emtr.on('greet', function() {
	console.log('Somwhere, someone said hello');
}

emtr.on('greet'), function() {
	console.log('A greeting occurred!');
}

Console.log('Hello');
emtr.emit('greet');

No need for if..else all over code. Can create event emitter. 

In node, it follows the same ides. 

Can see node event emitter in events.js in node standard files. 

Can use same code except use require('events');

var Emitter = require('events');

Relies on magic string - a string that has some special meaing in our code. Bad cause makes it easy to have a type cause bug. 

Can make an object somewhere to abstract event types

module.exports = {
	events: {
		GREET: 'greet',
	}
}

var eventConfig = require('./config').events;

OBJECT.CREATE AND PROTOTYPES

Prototypal inheritance - every object has prototypes and obj can object those properties directly. 

var person = {
	firstname: '',
	lastname: '',
	greet: function() {
		return this.firstname + ' ' this.lastname;
	}
}

var john = OBject.create(person);
john.firstname = 'John';
john.lastname = 'Doe';

var jane = Object.create(person);
jane.firstname = 'Jane';
jane.lastname = 'Doe';

john.greet();
jane.greet();

Simple and clear way of setting up objects to inherit.

Each object prortypes to person but has firstname and lastname that hide prototype. 

Within util.js there is method inherits that takes constructor for object, and constructor of properties you want to add.

Puts a prototype between two objects whose prototype is object want to add properties from. 

var EventEmitter = require('events');
var util = require('util');

function Greetr() {
	this.greeting = 'Hello world';
}

Any object created by greetr should also have event emitter properties
util.inherits(Greetr, EventEmitter);

Greetr.prototype.greet = function() {
	console.log(this.greeting);
	this.emit('greet');
}

var greeter1 = new Greetrr();

greeter1.on('greet', function() {
	console.log('someone greeted');
});

greeter1.greet();

Want if want to pass data to all listeneres. 
Greetr.prototype.greet = function(data) {
	this.emit('greet', data);
}

greeter1.on('greet', function(data) {
	console.log('someone greeted: ' + data);
}
	

greeter1.greet();


