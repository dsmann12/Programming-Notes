INTERMEDIATE

res.render() - to render HTML from an EJS file

Can submit HTML tags in string to get HTML to render in browser. 

app.get("/", function(req, res) {
	res.send("<h1>This is a heading</h1><h2>This is a subheading</h2>");
});

This is cumbersome. Easier ways. 

Can write all HTML and CSS and front end JS. 

Do not write static, plain HTML files with express. Write dynamic HTML files called templates. 

app.get("/", function(req, res) {
	res.render("dogs.html");
});

app.get("/", function(req, res) {
	res.render("home.ejs");
});

Must make a new directory called views. Express will look for EJS files in views directory.

EJS - embedded JavaScript. 

Use a certain notation in EJS files to tell file that it is JS

npm install ejs --save

<%= 5+5 %>

<h1>You fell in love with: <%= thingVar %></h1>

var thing = req.params.thing;
res.render("love.ejs", {thingVar = thing});

EJS can use conditionals and loops. Can add logic to HTML. 

Other template languages out there as well. 

<% if(thingVar.toLowerCase() === "david") { %>
	<p>Good choice! David is the best!</p>
<% } %>

Must wrap all JS code in the notation <%= %>.

Different types of brackets: 

1. <%= %> - value that is returned is rendered and added to HTML
2. <% %> - for simple logic. 
3. <%- %>

SERVING CUSTOM ASSETS

Can include a style tag though it is not ideal.

<style> body { color: purple; } </style>

Best to use external style sheet and link to it with a link tag

<link rel="stylesheet" href="app.css">

Must tell express to search for files in other directories. 

app.use(express.static("public")); tells express to look for files in public directory as well. 

Can also tell express that EJS will be being used and leave off .ejs extension.

app.set("view engine", "ejs");

Need HTML Boilerplate

<head> <body> etc. 

Can create a header file and footer.ejs file

header.ejs:

<!DOCTYPE html>
<html>
<head>
	<title>Title</title>
	<link rel="stylesheet" href="/app.css">
</head>
<body>

footer.ejs:

</body>
</html>

Must include them in EJS html. 

<% include partials/header %>

<html> ...

<% include partials/footer %>

/ says look in root directory for file. Not same directory file is in. Everything in public directory shows up in root. 

partials is a directory created in views to hold public header and footers. 

POSTS REQUESTS

POST - use a post route whenever you are adding data from somewhere. 

app.post("/addfriend", function(req, res) {
	res.send("You have reached the post route!");
});

In EJS file:

<form action="/addfriend" method="POST">
    <input type="text" placeholder="name" name="newfriend">
    <button>I made a new friend</button>
</form>

Need name to pull out information. 

req.body - object that will contain all of data from request body. 

Express cannot parse body on its own. need a new package called body-parser

npm install body-parser --save

Must add following to app.js:

var bodyParser = require('body-parser');

app.use(bodyParser.urlencoded({extended: true}));

This is typical POST request:

app.post("/addfriend", function(req, res) {
    var newFriend = req.body.newfriend;
    friends.push(newFriend);
    res.redirect("/friends");
});

Notice that property name "newfriend" is same as name of input form. 
