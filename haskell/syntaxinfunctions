SYNTAX IN FUNCTIONS

Pattern Matching

Pattern matching - consists of specifying patterns to which some data should conform and then checking to see if it does and deconstructing the data according to those patterns. 

When defining functions, can define separate function bodies for different patterns. Can pattern match on any data type -- numbers, characters, lists, tuples, etc. 

Ex: Trivial function that checks if the number we supplied to it is a seven or not

lucky :: (Integral a) => a -> String  
lucky 7 = "LUCKY NUMBER SEVEN!"  
lucky x = "Sorry, you're out of luck, pal!"

When lucky called, the pattern will be checked from top to bottom and when it conforms to a pattern, the corresponding function body will be used. Only way a number can conform to first pattern here is if it is 7. If not, it falls through to second pattern which matches anything and binds it to x. 

Ex: Function that says the numbers from 1 to 5 and says "Not between 1 and 5" for any other number. Without pattern matching, would have to make a pretty convoluted if then else tree. 

    sayMe :: (Integral a) => a -> String  
    sayMe 1 = "One!"  
    sayMe 2 = "Two!"  
    sayMe 3 = "Three!"  
    sayMe 4 = "Four!"  
    sayMe 5 = "Five!"  
    sayMe x = "Not between 1 and 5"  

Note that if we moved the last pattern (the catch-all one) to the top, it would always say "Not between 1 and 5", because it would catch all the numbers and they wouldn't have a chance to fall through and be checked for any other patterns.

Order is important

Ex: Factorial function

    factorial :: (Integral a) => a -> a  
    factorial 0 = 1  
		factorial n = n * factorial (n - 1)  

Reursive function. 

Pattern matching can also fail:

charName :: Char -> String  
charName 'a' = "Albert"  
charName 'b' = "Broseph"  
charName 'c' = "Cecil" 

and then try to call it with unexpected input:

    ghci> charName 'a'  
    "Albert"  
    ghci> charName 'b'  
    "Broseph"  
    ghci> charName 'h'  
    "*** Exception: tut.hs:(53,0)-(55,21): Non-exhaustive patterns in function charName  

Complains function has non-exhaustive patterns. When making patterns, should always include a catch-all pattern so that program doesn't crash if it gets unexpected input. 

Pattern matching can also be used on tuples. 

Ex: Adding coordinates

Without pattern mtching

    addVectors :: (Num a) => (a, a) -> (a, a) -> (a, a)  
    addVectors a b = (fst a + fst b, snd a + snd b)  

With pattern matching

    addVectors :: (Num a) => (a, a) -> (a, a) -> (a, a)  
    addVectors (x1, y1) (x2, y2) = (x1 + x2, y1 + y2)  

Already a catch-all pattern. 

fst and snd are used with pairs. But no functions for triples. Can create custome ones. 

    first :: (a, b, c) -> a  
    first (x, _, _) = x  
      
    second :: (a, b, c) -> b  
    second (_, y, _) = y  
      
    third :: (a, b, c) -> c  
    third (_, _, z) = z  

Can also pattern match in list comprehensions:

    ghci> let xs = [(1,3), (4,3), (2,4), (5,3), (5,6), (3,1)]  
    ghci> [a+b | (a,b) <- xs]  
    [4,7,6,8,11,4]   

Should pattern match fail, it will just move on to next element. 

Lists can also be used in pattern matching. Can match with the empty list [] or any pattern that involves : and the empty list. 

Pattern like x:xs will bind the head of the list to x and the rest to xs even if there's only one element, so xs ends up being an empty list. 

Note: The x:xs pattern is used a lot, especially with recursive functions. But patterns that have : in them only match against lists of length 1 or more.

If you want to bind, say, the first three elements to variables and the rest of the list to another variable, you can use something like x:y:z:zs. It will only match against lists that have three elements or more.

Ex: Custom head function

    head' :: [a] -> a  
    head' [] = error "Can't call head on an empty list, dummy!"  
    head' (x:_) = x  

    ghci> head' [4,5,6]  
    4  
    ghci> head' "Hello"  
    'H'  

Note: To bind several variables (even if some are _) we must surround them in parentheses. 

*error& function - takes a string and generates a runtime error, using that string as information about what kind of error occurred. Causes program to crash, so not good to use too much. 

Ex: Trivial function showing first elements in list in English

    tell :: (Show a) => [a] -> String  
    tell [] = "The list is empty"  
    tell (x:[]) = "The list has one element: " ++ show x  
    tell (x:y:[]) = "The list has two elements: " ++ show x ++ " and " ++ show y  
    tell (x:y:_) = "This list is long. The first two elements are: " ++ show x ++ " and " ++ show y  

This function is safe because it takes care of the empty list, a singleton list, a list with two elements and a list with more than two elements. Note that (x:[]) and (x:y:[]) could be rewriten as [x] and [x,y] (because its syntatic sugar, we don't need the parentheses). We can't rewrite (x:y:_) with square brackets because it matches any list of length 2 or more.

Ex: Implementing length function using pattern matching and recursion:

length' :: (Num b) => [a] -> b  
length' [] = 0  
length' (_:xs) = 1 + length' xs 

note that we've taken care of all possible patterns of a list. The first pattern matches an empty list and the second one matches anything that isn't an empty list.

Example: sum with recursion and pattern matching

    sum' :: (Num a) => [a] -> a  
    sum' [] = 0  
    sum' (x:xs) = x + sum' xs  

Also thing called *as patterns.* Those are handy way of breaking something up according to a pattern and binding it to names wihlst still keeping a reference to the whole thing. 

Do that by putting an @ in front of pattern. 

For instance, the pattern xs@(x:y:ys). This pattern will match exactly the same thing as x:y:ys but you can easily get the whole list via xs instead of repeating yourself by typing out x:y:ys in the function body again. Here's a quick and dirty example:

    capital :: String -> String  
    capital "" = "Empty string, whoops!"  
    capital all@(x:xs) = "The first letter of " ++ all ++ " is " ++ [x]  

    ghci> capital "Dracula"  
    "The first letter of Dracula is D"  

Normally we use as patterns to avoid repeating ourselves when matching against a bigger pattern when we have to use the whole thing again in the function body.

Can use ++ in pattern matches. 

Guards, Gurds

Guards are a way of testing whether some property of a value (or several of them) are true or false. Sounds like a lot of if statements and is very similar. 

Guards a lot more readable when there are several condition and they work with patterns. 

Ex: BMI app

bmiTell :: (RealFloat a) => a -> String  
bmiTell bmi  
    | bmi <= 18.5 = "You're underweight, you emo, you!"  
    | bmi <= 25.0 = "You're supposedly normal. Pffft, I bet you're ugly!"  
    | bmi <= 30.0 = "You're fat! Lose some weight, fatty!"  
    | otherwise   = "You're a whale, congratulations!" 

Guards indicated by pipes that follow a function's name and its parameters. Usually indented and lined up. Basically a boolean expression. 

If guard is False, it drops through to next guard. 

While big if else trees are usually frowned upon, sometimes a problem is defined in such a discrete way that you can't get around them. Guards are a very nice alternative for this.

Often, last guard is *otherwise*. otherwise is defined simply as otherwise=True and catches everything. Very similar to patterns, except they check for BOOLEAN CONDITIONS. If all guards of a function evaluate to False (and otherwise not provided), evaluation falls through to next pattern. That's how parrerns and guards play nicely together. If no suitable guards or patterns are found, an error is thrown. 

Of course we can use guards with functions that take as many parameters as we want. Instead of having the user calculate his own BMI before calling the function, let's modify this function so that it takes a height and weight and calculates it for us.

    bmiTell :: (RealFloat a) => a -> a -> String  
    bmiTell weight height  
        | weight / height ^ 2 <= 18.5 = "You're underweight, you emo, you!"  
        | weight / height ^ 2 <= 25.0 = "You're supposedly normal. Pffft, I bet you're ugly!"  
        | weight / height ^ 2 <= 30.0 = "You're fat! Lose some weight, fatty!"  
        | otherwise                 = "You're a whale, congratulations!"  

NOTE: No = after initial function name!

Guards can also be written inline, although I'd advise against that because it's less readable, even for very short functions. But to demonstrate, we could write max' like this:

    max' :: (Ord a) => a -> a -> a  
    max' a b | a > b = a | otherwise = b  

EX:  let's implement our own compare by using guards.

    myCompare :: (Ord a) => a -> a -> Ordering  
    a `myCompare` b  
        | a > b     = GT  
        | a == b    = EQ  
        | otherwise = LT  

    ghci> 3 `myCompare` 2  
    GT  

Note: Not only can we call functions as infix with backticks, we can also define them using backticks. Sometimes it's easier to read that way.

WHERE

Instead of previous BMI app, use where:

    bmiTell :: (RealFloat a) => a -> a -> String  
    bmiTell weight height  
        | bmi <= 18.5 = "You're underweight, you emo, you!"  
        | bmi <= 25.0 = "You're supposedly normal. Pffft, I bet you're ugly!"  
        | bmi <= 30.0 = "You're fat! Lose some weight, fatty!"  
        | otherwise   = "You're a whale, congratulations!"  
        where bmi = weight / height ^ 2  

Keyword where allows developer to define names or functions once to be used throughout previous body of code. 

Names are visible cross guards and give advantage of not repeating. It also improves readability by giving names to things and can make our programs faster since stuff like our bmi variable here is calculated only once. We could go a bit overboard and present our function like this:

bmiTell :: (RealFloat a) => a -> a -> String  
bmiTell weight height  
    | bmi <= skinny = "You're underweight, you emo, you!"  
    | bmi <= normal = "You're supposedly normal. Pffft, I bet you're ugly!"  
    | bmi <= fat    = "You're fat! Lose some weight, fatty!"  
    | otherwise     = "You're a whale, congratulations!"  
    where bmi = weight / height ^ 2  
          skinny = 18.5  
          normal = 25.0  
          fat = 30.0

Nam defined in where section of function only visible to that function. 

Must align all names in where section. 

where bindings aren't shared across function bodies of different patterns. If you want several patterns of one function to access some shared name, you have to define it globally.

You can also use where bindings to pattern match! We could have rewritten the where section of our previous function as:

    ...  
    where bmi = weight / height ^ 2  
          (skinny, normal, fat) = (18.5, 25.0, 30.0)  

Let's make another fairly trivial function where we get a first and a last name and give someone back their initials.

    initials :: String -> String -> String  
    initials firstname lastname = [f] ++ ". " ++ [l] ++ "."  
        where (f:_) = firstname  
              (l:_) = lastname    

We could have done this pattern matching directly in the function's parameters (it would have been shorter and clearer actually) but this just goes to show that it's possible to do it in where bindings as well.

Just like we've defined constants in where blocks, you can also define functions. Staying true to our healthy programming theme, let's make a function that takes a list of weight-height pairs and returns a list of BMIs.

    calcBmis :: (RealFloat a) => [(a, a)] -> [a]  
    calcBmis xs = [bmi w h | (w, h) <- xs]  
        where bmi weight height = weight / height ^ 2  

where bindings can also be nested. It's a common idiom to make a function and define some helper function in its where clause and then to give those functions helper functions as well, each with its own where clause.

LET

Similar to where bindings. 

Where bindings are a syntactic construct that let developer bind to variables at end of function and the whole function can see them, including all guards. 

Let bindings let developer bind to variables anywhere and are expressions themselves, but are very local, s don't span across guards. Can be used for pattern matching. 

    cylinder :: (RealFloat a) => a -> a -> a  
    cylinder r h = 
        let sideArea = 2 * pi * r * h  
            topArea = pi * r ^2  
        in  sideArea + 2 * topArea  

Form is:

let <bindings> in <expression>

Difference between where bindings is that let bindings are expressions themselves, where bindings are just syntactic constructs. 

    ghci> 4 * (let a = 9 in a + 1) + 2  
    42  

They can also be used to introduce functions in a local scope:

    ghci> [let square x = x * x in (square 5, square 3, square 2)]  
    [(25,9,4)]  

If we want to bind to several variables inline, we obviously can't align them at columns. That's why we can separate them with semicolons.

    ghci> (let a = 100; b = 200; c = 300 in a*b*c, let foo="Hey "; bar = "there!" in foo ++ bar)  
    (6000000,"Hey there!")  

You don't have to put a semicolon after the last binding but you can if you want. Like we said before, you can pattern match with let bindings. They're very useful for quickly dismantling a tuple into components and binding them to names and such.

    ghci> (let (a,b,c) = (1,2,3) in a+b+c) * 100  
    600  

You can also put let bindings inside list comprehensions. Let's rewrite our previous example of calculating lists of weight-height pairs to use a let inside a list comprehension instead of defining an auxiliary function with a where.

    calcBmis :: (RealFloat a) => [(a, a)] -> [a]  
    calcBmis xs = [bmi | (w, h) <- xs, let bmi = w / h ^ 2]  

We omitted the in part of the let binding when we used them in list comprehensions because the visibility of the names is already predefined there. However, we could use a let in binding in a predicate and the names defined would only be visible to that predicate. The in part can also be omitted when defining functions and constants directly in GHCi. If we do that, then the names will be visible throughout the entire interactive session.

    ghci> let zoot x y z = x * y + z  
    ghci> zoot 3 9 2  
    29  
    ghci> let boot x y z = x * y + z in boot 3 4 2  
    14  
    ghci> boot  
    <interactive>:1:0: Not in scope: `boot'  

CASE EXPRESSIONS

It's about taking a variable and then executing blocks of code for specific values of that variable and then maybe including a catch-all block of code in case the variable has some value for which we didn't set up a case.

Not only can we evaluate expressions based on the possible cases of the value of a variable, we can also do pattern matching. 

 Oh yeah, pattern matching on parameters in function definitions! Well, that's actually just syntactic sugar for case expressions. These two pieces of code do the same thing and are interchangeable:

    head' :: [a] -> a  
    head' [] = error "No head for empty lists!"  
    head' (x:_) = x  

    head' :: [a] -> a  
    head' xs = case xs of [] -> error "No head for empty lists!"  
                          (x:_) -> x  

Syntax:

    case expression of pattern -> result  
                       pattern -> result  
                       pattern -> result  
                       ...  

expression matched against the patterns. Pattern matching action is same as expected: the first pattern that matches the expression is used. If it falls through the whole case expresion and no suitable pattern is found, a runtime error occurs. 

Can be used almost anywhere:

    describeList :: [a] -> String  
    describeList xs = "The list is " ++ case xs of [] -> "empty."  
                                                   [x] -> "a singleton list."   
                                                   xs -> "a longer list."  

They are useful for pattern matching against something in the middle of an expression. Because pattern matching in function definitions is syntactic sugar for case expressions, we could have also defined this like so:

    describeList :: [a] -> String  
    describeList xs = "The list is " ++ what xs  
        where what [] = "empty."  
              what [x] = "a singleton list."  
              what xs = "a longer list."
