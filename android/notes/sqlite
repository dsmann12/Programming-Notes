SQLITE - DATA PERSISTANCE

Database -> permanent storage of complex data 

Android stores persistance data in the file system. Can be stored in internal storage that is private to your app, or shared or external storage. Today most devices only emulate external card. Some devices have emulated shared storage and secondary external storage. 4.4 kitkat added API to access secondary external storage. 

Android provides two functional layers on top of file system in form of Shared Preferences and SQLite. 

SQLite is a relational database that stores and organizes its data in tables. Created, Read, Update, Delete. Each table made up of rows and columns. Rows are for each entry, and columns are for fields in data. Should think of how many tables you need to represent data and what fields are needed. 

Uses SQL queries. 

Will have to generate SQL queries. 

CREATING THE CONTRACT

Defining database design. In android, contract is class that defines the tables and columns in the database.

Good way to organize:
Put definitions that relate generally to whole database directly in contract class and create an inner class for each table and include columns for those in those inner classes. 

public final class FeedReaderContract {
	// To prevent someone from accidentally instantiating the contract class,
	// make the constructor private
	private FeedReaderContract() {}

	// Inner class that defines the table contents
	public static class FeedEntry implements BaseColumns {
		public static final String TABLE_NAME = "entry";
		public static final String COLUMN_NAME_TITLE = "title";
		public static final String COLUMN_NAME_SUBTITLE = "subtitle";
	}
}

Should never need to instantiated contract class. 

Inner class implements BaseColumns interface. This interface automatically includes constant representing primary key field (_ID). Not always required but this can help.

UNIT TESTS

Designed to verify small individual part of code works as expected. 

In test folder. Can run them. 

CREATING THE DATABASE

Need to create a new class known as DBHelper

Extend Android class SQLiteOpenHelper -> exists for creating DB the first time and upgrading it when schema changes. Also provides other classes with reference to db, giving them way to access information through queries.

SQLOpenHelper:

onCreate -> responsible for creating the actual database
onUpgrade -> making sure database schema is up to date. 

Override both in dbhelper class. 

public class WaitlistDbHelper extends SQLiteOpenHelper {
	// will be name of local file on android device that stores db
	private static final String DATABASE_NAME = "waitlist.db";
	// should always start from 1. And when modify database schema, you should increment it
	// this will force users to upgrade databases when you release a new version of app
	// also should change contract if you change database schema.
	private static final int DATABASE_VERSION = 1;

	public WaitListDbHelper(Context context) {
		super(context, DATABASE_NAME, null, DATABASE_VERSION);
	}

	@Override
	public void onCreate(SQLiteDatabase, sqLiteDatabase) {
		// start by writing SQL statement that will describe database schema. Follow the contract
		// table name plus a comma separated list of fields in a set of parentheses
		final String SQL_CREATE_WAITLIST_TABLE = "CREATE TABLE " + 
			WaitlistEntry.TABLE_NAME + " (" +
			WaitlistEntry._ID + " INTEGER PRIMARY KEY AUTOINCREMENT," +
			WaitlistEntry.COLUMN_GUEST_NAME + " TEXT NOT NULL, " +
			WaitlistEntry.COLUMN_PARTY_SIZE + " INTEGER NOT NULL, " +
			WaitlistEntry.TIMESTAMP + " TIMESTAMP DEFAULT CURRENT_TIMESTAMP" +
			");";

		// can then call execSQL to create database
		sqLiteDatabase.execSQL(SQL_CREATE_WAITLIST_TABLE);
	}

	// called only when database version is incremented
	@Override
	public void onUpgrade(SQLiteDatabase sqLiteDatabase, int i, int i1) {
		// this will drop old database
		// should really append new columns and delete old when upgrading
		sqLiteDatabase.execSQL("DROP TABLE IF EXISTS " + WaitlistEntry.TABLE_NAME);
		onCreate(sqLiteDatabase);
	}
}

QUERYING DATA

In activity, declare variable of type SQLiteDatabase

private SQLiteDatabase mDb;

In OnCreate of activity, declare and initialize a dbHelper variable

WaitListDbHelper dbHelper = new WaitlistDbHelper(this);

Then set mDb to dbHelper.getWritableDatabase();

mDb = dbHelper.getWritableDatabase();

If were just reading data, could use dbHelper.getReadableDatabase();

Make method to get data from database in activty. Returns type Cursor

Cursor is what any SQL query result is stored in. Allows you to iterate over query result in easy way

private Cursor getAllGuests() {
	// only interested in table name and order by parameters
	resturn mDb.query(
		WaitlistContract.WaitlistEntry.TABLE_NAME,
		null, // projection array, can specify array of columns interested in getting back
		null,
		null,
		null,
		null,
		WaitlistContract.WaitlistEntry.COLUMN_TIMESTAMP
	);
}	

Then can call this function in activity

Cursor cursor = getAllGuests();

To use with RecyclerView, you should update adapter to accept the count returned by query. And use the count in adapter. 

cursor.getCount(); returns count of cursor result

UPDATING THE ADAPTER

Pass in entire cursor to adapter. (Instead of just the count. Can get count from cursor). Pass cursor into constructor

Like typical recyclerview, override onBindViewHolder to use data from cursor. 

Cursor points to beginning of results table. Can then move cursor to a row in table and use getString to get information from that row. 

@Override
public void onBindViewHolder(GuestViewHolder holder, int position) {
	if (!mCursor.moveToPosition(position))
		return;

	String name = mCursor.getString(mCursor.getColumnIndex(WaitlistContract.WaitlistEntry.COLUMN_GUEST_NAME));
	int partySize = mCursor.getInt(mCurstor.getColumnIndex(WaitlistContract.WaitlistEntry.COLUMN_PARTY_SIZE));
	holder.nameTextView.setText(name);
	holder.partSizeTextView.setText(String.valueOf(partySize));
}

ADDING DATA TO DATABASE

Can use EditText UI elements. Add references to them in activity.

Do any error checking as needed

Create a new method to make code modular

private long addNewGuest(String name, int partySize) {
	// use a ContentValues object that maps column names as key to desired values
	ContentValues cv = new ContentValues();
	cv.put(WaitlistContract.WaitlistEntry.COLUMN_GUEST_NAME, name);
	cv.put(WaitlistContract.WaitlistEntry.COLUMN_PARTY_SIZE, partySize);

	// call insert to run an insert query on TABLE_NAME with ContentValues created
	return mDb.insert(WaitlistContract.WAitlistEntry.TABLE_NAME, null, cv); // returns new id generated
}

Need adapter to update its cursor to see new entry in view

call mAdapter.swapCursor to update cursor by padding in getAllGuests()

REMOVING DATA FROM DATABASE

Can use swipe off feature. 

Create function called removeGuest that takes long id as input and returns a boolean to indicate success or failure

private boolean removeGuest(long id) {
    return mDb.delete(Waitlist.contract.WaitlistEntry.TABLE_NAME,
		WaitlistContract.WaitlistEntry._ID + "=" + id, null) > 0; // WHERE CLAUSE IS SECOND ARGUMENT
}

Delete returns number of rows successfully removed

SWIPE ACTIONS

Neeed ItemTouchHelper

Create on in onCreate in activity. 

Need callback to trigger when item is swiped. Must override some methods: onMove, onSwiped

new ItemTouchHelper(new ItemTouchHelper.SimpleCallback(0, // 0 refers to dragging items
	ItemTouchHelper.LEFT | ItemTouchHelper.RIGHT) {

		public boolean onMove(RecyclerView recylerView, RecyclerView.ViewHolder viewHolder, ) {
			// do nothing we only care about swiping
			return false;
		}

		public void onSwiped(RecyclerView.ViewHolder viewHolder, int swipeDir) {
			// need to get id of item we are swiping so can delete from database
			long id = (long) viewHolder.itemView.getTag();
			removeGuest(id);
			mAdapter.swapCursor(getAllGuests());
			// now just need to attach item touch helper to recycler view
		}
}).attachToRecyclerView(waitlistRecyclerView);

In UI, in Adapter, can use a TAG object to store id without making it visible to user. 

long id = mCursor.getLong(mCursor.getColumnIndex(WaitlistContract.WaitlistEntry._ID));
holder.itemView.setTag(id); // stores id inside item view

SUNSHINE

Can use DB to store latest weather data for when user cannot connect to the Internet


